#!/usr/bin/env python3
"""
Scripts to drive a DonkeyCar 2 vehicle.

This script constructs and starts the robotic vehicle using a modular framework. 
It defines components (e.g., controllers, drivetrain, actuators), initializes them, 
and updates their states in a loop for real-time operation.

Usage:
    manage.py (drive)

Options:
    -h --help          Show this screen.
"""
import os
import time

# Importing required libraries:
# - `docopt`: For command-line argument parsing.
# - `donkeycar`: Provides the modular vehicle framework and utility functions.

from docopt import docopt
import donkeycar as dk

# Importing DonkeyCar parts for vehicle functionality:
# - Controllers: Web-based or joystick for manual operation.
# - Throttle filter: Smoothens throttle transitions.
# - Utilities: Helpful tools for configuration and debugging.

from donkeycar.parts.controller import LocalWebController, \
    JoystickController, WebFpv
from donkeycar.parts.throttle_filter import ThrottleFilter
from donkeycar.parts import pins
from donkeycar.utils import *

# Importing additional libraries for network-related tasks.
from socket import gethostname

def drive(cfg):
    """
    Constructs and starts a modular robotic vehicle.

    Workflow:
    - Initializes a `Vehicle` object.
    - Adds components (parts) such as controllers, throttles, and steering.
    - Updates parts in a loop based on the configuration (`cfg`).

    Each part can be threaded for asynchronous execution, and the framework 
    automatically handles data exchange between parts through named inputs/outputs.

    Args:
        cfg: Configuration settings for the vehicle (from the DonkeyCar library).
    """

    # Initialize the DonkeyCar vehicle object.
    V = dk.vehicle.Vehicle()

    # Add a web controller for manual driving and data recording.
    ctr = LocalWebController(port=cfg.WEB_CONTROL_PORT)
    V.add(ctr,
          inputs=['cam/image_array', 'tub/num_records'],  # Inputs required by the controller.
          outputs=['angle', 'throttle', 'user/mode', 'recording'],  # Outputs generated by the controller.
          threaded=True)  # Run the controller in a separate thread.

    # Add a throttle filter to manage throttle inputs for smoother transitions.
    th_filter = ThrottleFilter()
    V.add(th_filter, inputs=['throttle'], outputs=['throttle'])

    # Initialize the drivetrain to control steering and throttle.
    drive_train = None

    # Configuring different drivetrain types:
    if cfg.DONKEY_GYM or cfg.DRIVE_TRAIN_TYPE == "MOCK":
        # Simulated drivetrain for testing purposes (no real hardware interaction).
        pass

    elif cfg.DRIVE_TRAIN_TYPE == "PWM_STEERING_THROTTLE":
        """
        Drivetrain for RC cars with PWM (Pulse Width Modulation) steering and throttle:
        - Uses PWM signals to control servo steering and ESC (Electronic Speed Controller) for throttle.
        """
        from donkeycar.parts.actuator import PWMSteering, PWMThrottle, PulseController
        dt = cfg.PWM_STEERING_THROTTLE

        # Steering controller configuration.
        steering_controller = PulseController(
            pwm_pin=pins.pwm_pin_by_id(dt["PWM_STEERING_PIN"]),
            pwm_scale=dt["PWM_STEERING_SCALE"],
            pwm_inverted=dt["PWM_STEERING_INVERTED"])
        steering = PWMSteering(controller=steering_controller,
                               left_pulse=dt["STEERING_LEFT_PWM"],
                               right_pulse=dt["STEERING_RIGHT_PWM"])

        # Throttle controller configuration.
        throttle_controller = PulseController(
            pwm_pin=pins.pwm_pin_by_id(dt["PWM_THROTTLE_PIN"]),
            pwm_scale=dt["PWM_THROTTLE_SCALE"],
            pwm_inverted=dt['PWM_THROTTLE_INVERTED'])
        throttle = PWMThrottle(controller=throttle_controller,
                               max_pulse=dt['THROTTLE_FORWARD_PWM'],
                               zero_pulse=dt['THROTTLE_STOPPED_PWM'],
                               min_pulse=dt['THROTTLE_REVERSE_PWM'])

        # Add steering and throttle to the drivetrain.
        drive_train = dict()
        drive_train['steering'] = steering
        drive_train['throttle'] = throttle

        # Add drivetrain components to the vehicle.
        V.add(steering, inputs=['angle'], threaded=True)
        V.add(throttle, inputs=['throttle'], threaded=True)

    elif cfg.DRIVE_TRAIN_TYPE == "I2C_SERVO":
        """
        Drivetrain using I2C-based servo controllers:
        - Useful for advanced steering/throttle control.
        """
        from donkeycar.parts.actuator import PCA9685, PWMSteering, PWMThrottle

        # Configure I2C-based steering and throttle controllers.
        steering_controller = PCA9685(cfg.STEERING_CHANNEL,
                                      cfg.PCA9685_I2C_ADDR,
                                      busnum=cfg.PCA9685_I2C_BUSNUM)
        steering = PWMSteering(controller=steering_controller,
                               left_pulse=cfg.STEERING_LEFT_PWM,
                               right_pulse=cfg.STEERING_RIGHT_PWM)

        throttle_controller = PCA9685(cfg.THROTTLE_CHANNEL,
                                      cfg.PCA9685_I2C_ADDR,
                                      busnum=cfg.PCA9685_I2C_BUSNUM)
        throttle = PWMThrottle(controller=throttle_controller,
                               max_pulse=cfg.THROTTLE_FORWARD_PWM,
                               zero_pulse=cfg.THROTTLE_STOPPED_PWM,
                               min_pulse=cfg.THROTTLE_REVERSE_PWM)

        # Add I2C drivetrain components to the vehicle.
        drive_train = dict()
        drive_train['steering'] = steering
        drive_train['throttle'] = throttle
        V.add(steering, inputs=['angle'], threaded=True)
        V.add(throttle, inputs=['throttle'], threaded=True)

    elif cfg.DRIVE_TRAIN_TYPE == "MM1":
        """
        Drivetrain for the RoboHAT MM1 platform.
        - Handles hardware-specific steering/throttle configurations.
        """
        from donkeycar.parts.robohat import RoboHATDriver
        drive_train = RoboHATDriver(cfg)
        V.add(drive_train, inputs=['angle', 'throttle'])

    # Attach the drivetrain configuration to the controller (temporary approach).
    ctr.drive_train = drive_train
    ctr.drive_train_type = cfg.DRIVE_TRAIN_TYPE

    # Print calibration instructions for the user.
    print(f"Go to http://{gethostname()}.local:{ctr.port}/calibrate to "
          f"calibrate ")

    # Start the vehicle loop at the specified rate (e.g., 20 Hz).
    V.start(rate_hz=cfg.DRIVE_LOOP_HZ, max_loop_count=cfg.MAX_LOOPS)


if __name__ == '__main__':
    """
    Main entry point for the script.
    - Parses command-line arguments to determine the operation mode (e.g., 'drive').
    - Loads the vehicle configuration.
    - Starts the driving functionality if specified.
    """
    args = docopt(__doc__)
    cfg = dk.load_config()

    if args['drive']:
        # Start the driving loop with the loaded configuration.
        drive(cfg)
